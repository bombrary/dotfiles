[[plugins]]
repo = 'Shougo/ddc.vim'
on_event='InsertEnter'
hook_source = '''
	" Customize global settings


  " Use ui
  call ddc#custom#patch_global('ui', 'native')

	" Use around source.
	call ddc#custom#patch_global('sources', ['around', 'nvim-lsp'])

	" Use matcher_head and sorter_rank.
	call ddc#custom#patch_global('sourceOptions', {
	      \ '_': {
	      \   'matchers': ['matcher_head'],
	      \   'sorters': ['sorter_rank']},
	      \ })

	" Change source options
	call ddc#custom#patch_global('sourceOptions', {
	      \ 'around': {'mark': 'A'},
        \ 'nvim-lsp': {
        \   'mark': 'lsp',
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
        \ })
	call ddc#custom#patch_global('sourceParams', {
	      \ 'around': {'maxSize': 500},
        \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
	      \ })

	" Mappings

	" <TAB>: completion.
	inoremap <silent><expr> <TAB>
	\ pumvisible() ? '<C-n>' :
	\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
	\ '<TAB>' : ddc#manual_complete()

	" <S-TAB>: completion back.
	inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

	" Use ddc.
	call ddc#enable()
'''


[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-matcher_head'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-sorter_rank'
 on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo='lervag/vimtex'
on_ft=['tex']
hook_source='''
  let g:vimtex_compiler_latexmk = {
        \ 'background': 1,
        \ 'build_dir': '',
        \ 'continuous': 1,
        \ 'options': [
        \    '-verbose',
        \    '-halt-on-error',
        \    '-file-line-error',
        \    '-interaction=nonstopmode',
        \],
        \}

  let g:vimtex_view_general_viewer
        \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
  let g:vimtex_view_general_options = '-r @line @pdf @tex'
'''

[[plugins]]
repo="elm-tooling/elm-vim"
on_ft=['elm']


[[plugins]]
repo="purescript-contrib/purescript-vim"
on_ft=['purescript']
merge_ftdetect = true
hook_source='''
  let g:purescript_indent_case = 2
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = 'python'
hook_source='''
let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'itchyny/vim-pdf'
on_ft = 'pdf'

[[plugins]]
repo = 'nbouscal/vim-stylish-haskell'
on_ft = 'haskell'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vmchale/dhall-vim'
on_ft = 'dhall'

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python']
hook_add = '''
let g:autopep8_ignore="E501"
'''

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'vlime/vlime'
rtp = 'vim/'
on_ft = ['lisp']

[[plugins]]
repo = 'jalvesaq/Nvim-R'
on_ft = ['r']

[[plugins]]
repo = 'tidalcycles/vim-tidal'
on_ft = ['tidal']
hook_source='''
let g:tidal_target = "terminal"
'''

[[plugins]]
repo='idris-hackers/idris-vim'
merge_ftdetect = true
on_ft = ['idris']

[[plugins]]
repo='rust-lang/rust.vim'
on_ft=['rust']

[[plugins]]
repo = 'LeafCage/vimhelpgenerator'
on_cmd = ['VimHelpGenerator', 'VimHelpGeneratorVirtual']
hook_add = '''
let g:vimhelpgenerator_defaultlanguage = 'en'
let g:vimhelpgenerator_version = ''
let g:vimhelpgenerator_author = 'Author  : koturn'
let g:vimhelpgenerator_contents = {
      \ 'contents': 1, 'introduction': 1, 'usage': 1, 'interface': 1,
      \ 'variables': 1, 'commands': 1, 'key-mappings': 1, 'functions': 1,
      \ 'setting': 0, 'todo': 1, 'changelog': 0
      \}
'''

[[plugins]]
repo = 'hanschen/vim-ipython-cell'
on_ft = 'python'
on_source = 'vim-slime'
hook_source = '''
" map <LocalLeader>s to start IPython
nnoremap <LocalLeader>s :SlimeSend1 ipython --matplotlib<CR>

" map <LocalLeader>r to run script
nnoremap <LocalLeader>r :IPythonCellRun<CR>

" map <LocalLeader>R to run script and time the execution
nnoremap <LocalLeader>R :IPythonCellRunTime<CR>

" map <LocalLeader>c to execute the current cell
nnoremap <LocalLeader>c :IPythonCellExecuteCell<CR>

" map <LocalLeader>C to execute the current cell and jump to the next cell
nnoremap <LocalLeader>C :IPythonCellExecuteCellJump<CR>

" map <LocalLeader>l to clear IPython screen
nnoremap <LocalLeader>l :IPythonCellClear<CR>

" map <LocalLeader>x to close all Matplotlib figure windows
nnoremap <LocalLeader>x :IPythonCellClose<CR>

" map [c and ]c to jump to the previous and next cell header
nnoremap [c :IPythonCellPrevCell<CR>
nnoremap ]c :IPythonCellNextCell<CR>

" map <LocalLeader>h to send the current line or current selection to IPython
nmap <LocalLeader>h <Plug>SlimeLineSend
xmap <LocalLeader>h <Plug>SlimeRegionSend

" map <LocalLeader>p to run the previous command
nnoremap <LocalLeader>p :IPythonCellPrevCommand<CR>

" map <LocalLeader>Q to restart ipython
nnoremap <LocalLeader>Q :IPythonCellRestart<CR>

" map <LocalLeader>d to start debug mode
nnoremap <LocalLeader>d :SlimeSend1 %debug<CR>

" map <LocalLeader>q to exit debug mode or IPython
nnoremap <LocalLeader>q :SlimeSend1 exit<CR>

" map <F9> and <F10> to insert a cell header tag above/below and enter insert mode
nmap <F9> :IPythonCellInsertAbove<CR>a
nmap <F10> :IPythonCellInsertBelow<CR>a

" also make <F9> and <F10> work in insert mode
imap <F9> <C-o>:IPythonCellInsertAbove<CR>
imap <F10> <C-o>:IPythonCellInsertBelow<CR>
'''

[[plugins]]
repo = 'mroavi/vim-julia-cell'
on_ft = ['julia']
on_source = 'vim-slime'
hook_source = '''
let g:julia_cell_delimit_cells_by = 'tags'

nnoremap <LocalLeader>r :JuliaCellRun<CR>

nnoremap <LocalLeader>c :JuliaCellExecuteCell<CR>

nnoremap <LocalLeader>C :JuliaCellExecuteCellJump<CR>

nnoremap <LocalLeader>l :JuliaCellClear<CR>

nnoremap <LocalLeader>[c :JuliaCellPrevCell<CR>
nnoremap <LocalLeader>]c :JuliaCellNextCell<CR>

nmap <LocalLeader>h <Plug>SlimeLineSend
xmap <LocalLeader>h <Plug>SlimeRegionSend

function JuliaOpen()
  vnew
  let jobid = termopen($SHELL)
  wincmd p 
  if !exists("b:slime_config")
    let b:slime_config = {"jobid": get(g:, "slime_last_channel", "")}
  else
    let b:slime_config['jobid'] = jobid
  endif
  SlimeSend1 julia
endfunction

command! JuliaOpen call JuliaOpen()
'''

[[plugins]]
repo='~/repos/bombrary/vim-asir-slime'
on_ft = ['asir']
hook_source = '''
nnoremap <LocalLeader>r :AsirRun<CR>

nmap <LocalLeader>h <Plug>SlimeLineSend
xmap <LocalLeader>h <Plug>SlimeRegionSend

nmap <LocalLeader><C-d> :SlimeSend0 "\<C-d>"<CR>
nmap <LocalLeader><C-c> :SlimeSend0 "\<C-c>"<CR>

nnoremap <LocalLeader>s :SlimeSend1 openxm fep asir<CR>

function AsirOpen()
  vnew
  let jobid = termopen($SHELL)
  wincmd p 
  if !exists("b:slime_config")
    let b:slime_config = {"jobid": get(g:, "slime_last_channel", "")}
  else
    let b:slime_config['jobid'] = jobid
  endif
  SlimeSend1 openxm fep asir
endfunction

command! AsirOpen call AsirOpen()
'''

[[plugins]]
repo='~/repos/bombrary/vim-asir'
on_ft=["asir"]
merge_ftdetect = true


[[plugins]]
repo='mfussenegger/nvim-jdtls'
on_ft=["java"]
hook_source = '''
lua << EOF
local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ':p:h:t')
local workspace_dir = '/Users/bombrary/.cache/jdt-language-server-1.9.0/workspace/' .. project_name

-- See `:help vim.lsp.start_client` for an overview of the supported `config` options.
local config = {
  -- The command that starts the language server
  -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
  cmd = {
    'java',
    '-Declipse.application=org.eclipse.jdt.ls.core.id1',
    '-Dosgi.bundles.defaultStartLevel=4',
    '-Declipse.product=org.eclipse.jdt.ls.core.product',
    '-Dlog.protocol=true',
    '-Dlog.level=ALL',
    '-Xms1g',
    '--add-modules=ALL-SYSTEM',
    '--add-opens', 'java.base/java.util=ALL-UNNAMED',
    '--add-opens', 'java.base/java.lang=ALL-UNNAMED',

    '-jar', '/Users/bombrary/.cache/jdt-language-server-1.9.0/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar',
    '-configuration', '/Users/bombrary/.cache/jdt-language-server-1.9.0/config_mac',

    '-data', workspace_dir,
  },

  -- ðŸ’€
  -- This is the default if not provided, you can remove it. Or adjust as needed.
  -- One dedicated LSP server & client will be started per unique root_dir
  root_dir = require('jdtls.setup').find_root({'.git', 'mvnw', 'gradlew'}),

  -- Here you can configure eclipse.jdt.ls specific settings
  -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
  -- for a list of options
  settings = {
    java = {
    }
  },

  -- Language server `initializationOptions`
  -- You need to extend the `bundles` with paths to jar files
  -- if you want to use additional eclipse.jdt.ls plugins.
  --
  -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation
  --
  -- If you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this
  init_options = {
    bundles = {}
  },
}
-- This starts a new client & server,
-- or attaches to an existing client & server depending on the `root_dir`.
require('jdtls').start_or_attach(config)

-- Key mappings

local java_on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end
java_on_attach(nil, vim.api.nvim_get_current_buf())
EOF
'''

[[plugins]]
repo='qnighy/satysfi.vim'
merge_ftdetect=true
on_ft=['satysfi']
